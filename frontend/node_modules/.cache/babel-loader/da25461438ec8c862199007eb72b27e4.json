{"ast":null,"code":"import _asyncToGenerator from \"/workspace/animalNFTmarket/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/workspace/animalNFTmarket/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/workspace/animalNFTmarket/frontend/src/routes/my-animal.tsx\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@chakra-ui/react\";\nimport { mintAnimalTokenContract } from \"../web3Config\";\nimport AnimalCard from \"../components/AnimalCard\";\nvar MyAnimal = function MyAnimal(_ref) {\n  var account = _ref.account;\n  //내 animal card를 저장할 배열\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    animalCardArray = _useState2[0],\n    setAnimalCardArray = _useState2[1];\n  var getAnimalTokens = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var balanceLength, tempAnimalCardArray, i, animalTokenId, animalType;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return mintAnimalTokenContract.methods.balanceOf(account).call();\n            case 3:\n              balanceLength = _context.sent;\n              //for문을 이용하여 보유한 각 카드의 animal type 구하기\n              tempAnimalCardArray = [];\n              i = 0;\n            case 6:\n              if (!(i = parseInt(balanceLength))) {\n                _context.next = 18;\n                break;\n              }\n              _context.next = 9;\n              return mintAnimalTokenContract.methods.tokenOfOwnerByIndex(account, i).call();\n            case 9:\n              animalTokenId = _context.sent;\n              _context.next = 12;\n              return mintAnimalTokenContract.methods.animalTypes(animalTokenId).call();\n            case 12:\n              animalType = _context.sent;\n              console.log(\"완료1\");\n              tempAnimalCardArray.push(animalType);\n            case 15:\n              i++;\n              _context.next = 6;\n              break;\n            case 18:\n              //animalTypeArray 넣기\n              setAnimalCardArray(tempAnimalCardArray);\n              _context.next = 24;\n              break;\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 21]]);\n    }));\n    return function getAnimalTokens() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    //account를 못 받아 왔을 경우 아무것도 실행하지 않음\n    if (!account) {\n      console.log('noaccount');\n      return;\n    }\n    getAnimalTokens();\n  }, [account]);\n  useEffect(function () {\n    console.log(animalCardArray);\n  }, [animalCardArray]);\n\n  //Grid로 일정 숫자만큼 띄워서 보여주기\n  return /*#__PURE__*/React.createElement(Grid, {\n    templateColumns: \"repeat(4, 1fr)\",\n    gap: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }\n  }, animalCardArray && animalCardArray.map(function (v, i) {\n    return /*#__PURE__*/React.createElement(AnimalCard, {\n      key: i,\n      animalType: v,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 24\n      }\n    });\n  }));\n};\nexport default MyAnimal;","map":{"version":3,"names":["React","useEffect","useState","Grid","mintAnimalTokenContract","AnimalCard","MyAnimal","account","animalCardArray","setAnimalCardArray","getAnimalTokens","methods","balanceOf","call","balanceLength","tempAnimalCardArray","i","parseInt","tokenOfOwnerByIndex","animalTokenId","animalTypes","animalType","console","log","push","error","map","v"],"sources":["/workspace/animalNFTmarket/frontend/src/routes/my-animal.tsx"],"sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport { Grid } from \"@chakra-ui/react\";\nimport { mintAnimalTokenContract } from \"../web3Config\";\nimport AnimalCard from \"../components/AnimalCard\";\n\ninterface MyAnimalProps {\n    account: string;\n}\n\nconst MyAnimal: FC<MyAnimalProps> = ({ account }) => {\n    //내 animal card를 저장할 배열\n    const [animalCardArray, setAnimalCardArray] = useState<string[]>();\n\n    const getAnimalTokens = async () => {\n        try {\n            \n            //owner가 가진 전체 토큰의 개수 받아오기\n            const balanceLength = await mintAnimalTokenContract.methods\n                .balanceOf(account)\n                .call();\n\n            //for문을 이용하여 보유한 각 카드의 animal type 구하기\n            const tempAnimalCardArray = [];\n\n            for(let i=0; i=parseInt(balanceLength); i++) {\n                const animalTokenId = await mintAnimalTokenContract.methods\n                    .tokenOfOwnerByIndex(account, i)\n                    .call();\n\n                const animalType = await mintAnimalTokenContract.methods\n                    .animalTypes(animalTokenId)\n                    .call();  \n                \n                    console.log(\"완료1\");\n                tempAnimalCardArray.push(animalType);\n            }\n\n            //animalTypeArray 넣기\n            setAnimalCardArray(tempAnimalCardArray);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    useEffect(() => {\n        //account를 못 받아 왔을 경우 아무것도 실행하지 않음\n        if(!account){\n            console.log('noaccount');\n         return;\n        }\n\n        getAnimalTokens();\n    }, [account]);\n\n    useEffect(() => {\n        console.log(animalCardArray);\n    }, [animalCardArray]);\n    \n    //Grid로 일정 숫자만큼 띄워서 보여주기\n    return <Grid templateColumns=\"repeat(4, 1fr)\" gap={8}>\n        {animalCardArray && animalCardArray.map((v, i) => {\n                return <AnimalCard key={i} animalType={v}/>\n            })\n        }\n    </Grid>\n}\n\nexport default MyAnimal;"],"mappings":";;;;+CACA;AADA,OAAOA,KAAK,IAAQC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,uBAAuB,QAAQ,eAAe;AACvD,OAAOC,UAAU,MAAM,0BAA0B;AAMjD,IAAMC,QAA2B,GAAG,SAA9BA,QAA2B,OAAoB;EAAA,IAAdC,OAAO,QAAPA,OAAO;EAC1C;EAAA,gBAC8CL,QAAQ,EAAY;IAAA;IAA3DM,eAAe;IAAEC,kBAAkB;EAE1C,IAAMC,eAAe;IAAA,uEAAG;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,OAIYN,uBAAuB,CAACO,OAAO,CACtDC,SAAS,CAACL,OAAO,CAAC,CAClBM,IAAI,EAAE;YAAA;cAFLC,aAAa;cAInB;cACMC,mBAAmB,GAAG,EAAE;cAEtBC,CAAC,GAAC,CAAC;YAAA;cAAA,MAAEA,CAAC,GAACC,QAAQ,CAACH,aAAa,CAAC;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACNV,uBAAuB,CAACO,OAAO,CACtDO,mBAAmB,CAACX,OAAO,EAAES,CAAC,CAAC,CAC/BH,IAAI,EAAE;YAAA;cAFLM,aAAa;cAAA;cAAA,OAIMf,uBAAuB,CAACO,OAAO,CACnDS,WAAW,CAACD,aAAa,CAAC,CAC1BN,IAAI,EAAE;YAAA;cAFLQ,UAAU;cAIZC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;cACtBR,mBAAmB,CAACS,IAAI,CAACH,UAAU,CAAC;YAAC;cAVDL,CAAC,EAAE;cAAA;cAAA;YAAA;cAa3C;cACAP,kBAAkB,CAACM,mBAAmB,CAAC;cAAC;cAAA;YAAA;cAAA;cAAA;cAExCO,OAAO,CAACG,KAAK,aAAO;YAAC;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAE5B;IAAA,gBA7BKf,eAAe;MAAA;IAAA;EAAA,GA6BpB;EAEDT,SAAS,CAAC,YAAM;IACZ;IACA,IAAG,CAACM,OAAO,EAAC;MACRe,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC3B;IACD;IAEAb,eAAe,EAAE;EACrB,CAAC,EAAE,CAACH,OAAO,CAAC,CAAC;EAEbN,SAAS,CAAC,YAAM;IACZqB,OAAO,CAACC,GAAG,CAACf,eAAe,CAAC;EAChC,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;;EAErB;EACA,oBAAO,oBAAC,IAAI;IAAC,eAAe,EAAC,gBAAgB;IAAC,GAAG,EAAE,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAChDA,eAAe,IAAIA,eAAe,CAACkB,GAAG,CAAC,UAACC,CAAC,EAAEX,CAAC,EAAK;IAC1C,oBAAO,oBAAC,UAAU;MAAC,GAAG,EAAEA,CAAE;MAAC,UAAU,EAAEW,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAE;EAC/C,CAAC,CAAC,CAEH;AACX,CAAC;AAED,eAAerB,QAAQ"},"metadata":{},"sourceType":"module"}