{"ast":null,"code":"import _asyncToGenerator from \"/workspace/animalNFTmarket/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/workspace/animalNFTmarket/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/workspace/animalNFTmarket/frontend/src/routes/main.tsx\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport React, { useState } from \"react\";\nimport { Box, Text, Flex, Button } from \"@chakra-ui/react\";\nimport { AnimalCard } from \"\";\nimport { mintAnimalTokenContract } from \"../contracts\";\nvar Main = function Main(_ref) {\n  var account = _ref.account;\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    newAnimalType = _useState2[0],\n    setNewAnimalType = _useState2[1]; //mint 하는 함수\n  var onClickMint = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var response, balanceLength, animalTokenId, animalType;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              if (account) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 3:\n              _context.next = 5;\n              return mintAnimalTokenContract.methods.mintAnimalToken().send({\n                from: account\n              });\n            case 5:\n              response = _context.sent;\n              if (!response.status) {\n                _context.next = 17;\n                break;\n              }\n              _context.next = 9;\n              return mintAnimalTokenContract.methods.balanceOf(account).call();\n            case 9:\n              balanceLength = _context.sent;\n              _context.next = 12;\n              return mintAnimalTokenContract.methods.tokenOfOwnerByIndex(account, parseInt(balanceLength.length, 10) - 1).call();\n            case 12:\n              animalTokenId = _context.sent;\n              _context.next = 15;\n              return mintAnimalTokenContract.methods.animalTypes(animalTokenId).call();\n            case 15:\n              animalType = _context.sent;\n              //새로운 토큰에 animal type 넣기\n              setNewAnimalType(animalType);\n            case 17:\n              console.log(response);\n              _context.next = 23;\n              break;\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 20]]);\n    }));\n    return function onClickMint() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return /*#__PURE__*/React.createElement(Flex, {\n    w: \"full\",\n    h: \"100vh\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    direction: \"column\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, newAnimalType ? /*#__PURE__*/React.createElement(AnimalCard, {\n    animalType: newAnimalType,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, \"Let's mint Animal Card!!!\")), /*#__PURE__*/React.createElement(Button, {\n    mt: 4,\n    size: \"sm\",\n    colorScheme: \"blue\",\n    onClick: onClickMint,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Mint\"));\n};\nexport default Main;","map":{"version":3,"names":["React","useState","Box","Text","Flex","Button","AnimalCard","mintAnimalTokenContract","Main","account","newAnimalType","setNewAnimalType","onClickMint","methods","mintAnimalToken","send","from","response","status","balanceOf","call","balanceLength","tokenOfOwnerByIndex","parseInt","length","animalTokenId","animalTypes","animalType","console","log","error"],"sources":["/workspace/animalNFTmarket/frontend/src/routes/main.tsx"],"sourcesContent":["import React, { FC, useState } from \"react\";\nimport { Box, Text, Flex, Button } from \"@chakra-ui/react\";\nimport { AnimalCard } from \"\";\nimport { mintAnimalTokenContract } from \"../contracts\";\n\ninterface MainProps {\n    //account는 주소\n    account: string;\n}\n\nconst Main: FC<MainProps> = ({ account }) => {\n    const [newAnimalType, setNewAnimalType] = useState<string>();\n\n    //mint 하는 함수\n    const onClickMint = async () => {\n        try {\n            if (!account) return;\n\n            //mint하는 코드; (컨트랙트 이름).methods.(실행할 함수(+인자)).(기능) 형식으로 코드 작성\n            const response = await mintAnimalTokenContract.methods\n                .mintAnimalToken()\n                .send({ from: account });\n            \n            //위의 민팅 함수가 정상적으로 실행됐을 경우,\n            if(response.status) {\n                //owner가 가진 전체 토큰의 개수 받아오기\n                const balanceLength = await mintAnimalTokenContract.methods\n                    .balanceOf(account)\n                    .call();\n\n                //가장 마지막으로 민팅한 토큰 아이디 구하기\n                const animalTokenId = await mintAnimalTokenContract.methods\n                    .tokenOfOwnerByIndex(account, parseInt(balanceLength.length, 10) - 1)\n                    .call();\n\n                //해당 토큰의 animal type 구하기\n                const animalType = await mintAnimalTokenContract.methods\n                    .animalTypes(animalTokenId)\n                    .call(); \n                \n                //새로운 토큰에 animal type 넣기\n                setNewAnimalType(animalType);\n            }\n\n            console.log(response);\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    return (\n        <Flex w=\"full\" h=\"100vh\" justifyContent=\"center\" alignItems=\"center\" direction=\"column\">\n            <Box>\n                {/*animalcard가 있으면 보여주고 없으면 mint하라고 텍스트*/}\n                {newAnimalType ? (\n                    <AnimalCard animalType={newAnimalType} />\n                ) : (\n                    <Text>Let's mint Animal Card!!!</Text>\n                )}\n            </Box>\n            <Button mt={4} size=\"sm\" colorScheme=\"blue\" onClick={onClickMint}>Mint</Button>\n        </Flex>\n    );\n};\n\nexport default Main;"],"mappings":";;;;+CACA;AADA,OAAOA,KAAK,IAAQC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,QAAQ,kBAAkB;AAC1D,SAASC,UAAU,QAAQ,EAAE;AAC7B,SAASC,uBAAuB,QAAQ,cAAc;AAOtD,IAAMC,IAAmB,GAAG,SAAtBA,IAAmB,OAAoB;EAAA,IAAdC,OAAO,QAAPA,OAAO;EAAA,gBACQR,QAAQ,EAAU;IAAA;IAArDS,aAAa;IAAEC,gBAAgB,kBAEtC;EACA,IAAMC,WAAW;IAAA,uEAAG;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,IAEPH,OAAO;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;cAAA,OAGWF,uBAAuB,CAACM,OAAO,CACjDC,eAAe,EAAE,CACjBC,IAAI,CAAC;gBAAEC,IAAI,EAAEP;cAAQ,CAAC,CAAC;YAAA;cAFtBQ,QAAQ;cAAA,KAKXA,QAAQ,CAACC,MAAM;gBAAA;gBAAA;cAAA;cAAA;cAAA,OAEcX,uBAAuB,CAACM,OAAO,CACtDM,SAAS,CAACV,OAAO,CAAC,CAClBW,IAAI,EAAE;YAAA;cAFLC,aAAa;cAAA;cAAA,OAKSd,uBAAuB,CAACM,OAAO,CACtDS,mBAAmB,CAACb,OAAO,EAAEc,QAAQ,CAACF,aAAa,CAACG,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CACpEJ,IAAI,EAAE;YAAA;cAFLK,aAAa;cAAA;cAAA,OAKMlB,uBAAuB,CAACM,OAAO,CACnDa,WAAW,CAACD,aAAa,CAAC,CAC1BL,IAAI,EAAE;YAAA;cAFLO,UAAU;cAIhB;cACAhB,gBAAgB,CAACgB,UAAU,CAAC;YAAC;cAGjCC,OAAO,CAACC,GAAG,CAACZ,QAAQ,CAAC;cAAC;cAAA;YAAA;cAAA;cAAA;cAEtBW,OAAO,CAACE,KAAK,aAAO;YAAC;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAE5B;IAAA,gBAlCKlB,WAAW;MAAA;IAAA;EAAA,GAkChB;EAED,oBACI,oBAAC,IAAI;IAAC,CAAC,EAAC,MAAM;IAAC,CAAC,EAAC,OAAO;IAAC,cAAc,EAAC,QAAQ;IAAC,UAAU,EAAC,QAAQ;IAAC,SAAS,EAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACnF,oBAAC,GAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAECF,aAAa,gBACV,oBAAC,UAAU;IAAC,UAAU,EAAEA,aAAc;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,gBAEzC,oBAAC,IAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,+BACR,CACC,eACN,oBAAC,MAAM;IAAC,EAAE,EAAE,CAAE;IAAC,IAAI,EAAC,IAAI;IAAC,WAAW,EAAC,MAAM;IAAC,OAAO,EAAEE,WAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,UAAc,CAC5E;AAEf,CAAC;AAED,eAAeJ,IAAI"},"metadata":{},"sourceType":"module"}